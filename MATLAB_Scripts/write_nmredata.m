function write_nmredata(hObject, eventdata, handles)
if ~isfield(handles, 'Entry')
    return
end
if ~isfield(handles.Entry, 'mol_file_path')  || isempty(handles.Entry.mol_file_path) 
    uiwait(msgbox('A structure file should be loaded! Try adding a structure file manually in the corresponding xml file.'));
    return
end
if ~isfield(handles.Entry, 'InChI') || isempty(handles.Entry.InChI)
    uiwait(msgbox('No InChI string was found! Try adding a standard InChI to the corresponding xml file.'));
    return
end
choice = questdlg('The structure file and the InChI string should be generated by ALATIS. Would you want to continue?', 'Save NMReData', 'Yes', 'No', 'Yes');
if strcmp(choice, 'No')
    return
end

mol_path = sprintf('%s/%s', handles.folder_path, handles.Entry.mol_file_path);
fin = fopen(mol_path, 'r');
if fin < 1
    uiwait(errordlg('Could not open the structure file!'));
    return
end
mol_file = {};
tline = fgetl(fin);
while ischar(tline)
    mol_file{end+1} = tline;
    if ~isempty(strfind(tline, 'M  END'))
        break
    end
    tline = fgetl(fin);
end
fclose(fin);
if isempty(mol_file)
    uiwait(errordlg('The structure file is empty!'));
    return
end
mol_file{1} = sprintf('generated by GISSMO; %s', mol_file{1});
output_folder = sprintf('%s/nmredata/', handles.folder_path);
[~, ~] = system(sprintf('rm -rf %s; mkdir %s', output_folder, output_folder));
exp_path = sprintf('%s/%s', handles.folder_path, handles.Entry.spectrum.path);
[~, ~] = system(sprintf('cp -r %s %s', exp_path, output_folder));

% deleting empty lines from the end
j = length(mol_file)+1;
for i=length(mol_file):-1:1
    f = strtrim(mol_file{i});
    if ~isempty(f)
        j = i+1;
        break
    end
end
if j <= length(mol_file)
    mol_file = mol_file(1:j);
end
fout = fopen(sprintf('%s/compound1.sdf', output_folder), 'w');
for i=1:length(mol_file)
    fprintf(fout, '%s\n', mol_file{i});
end

fprintf(fout,'> <NMREDATA_VERSION>\n');
fprintf(fout,'1.1 \\\n\n');

fprintf(fout,'> <NMREDATA_LEVEL>\n');
fprintf(fout,'0 \\\n');
fprintf(fout,'\n');

fprintf(fout,'> <NMREDATA_ID>\n');
fprintf(fout,'%s \\\n', handles.Entry.ID);
fprintf(fout,'Doi= \\\n');
fprintf(fout,'Record= \\\n');
fprintf(fout,'Path=compound1.sdf \\\n');
fprintf(fout,'\n');

fprintf(fout,'> <NMREDATA_FORMULA>\n');
fprintf(fout,'\n');
    
fprintf(fout,'> <NMREDATA_ALATIS>\n');
fprintf(fout,'%s\\\n', handles.Entry.InChI);
fprintf(fout,'\n');

fprintf(fout,'> <NMREDATA_CONCENTRATION>\n');
fprintf(fout,'\n');

fprintf(fout,'> <NMREDATA_SOLVENT>\n');
fprintf(fout,'\n');

fprintf(fout,'> <NMREDATA_PH>\n');
fprintf(fout,'\n');

fprintf(fout,'> <NMREDATA_TEMPERATURE>\n');
fprintf(fout,'\n');

processing_info = get_processing_package(hObject, eventdata, handles);
fprintf(fout,'> <NMREDATA_ASSIGNMENT>\n');
cs = diag(processing_info.spin_matrix);
for i=1:length(cs)
    fprintf(fout, '%s, %f, %s\\\n', processing_info.spin_names{i}, cs(i), processing_info.spin_names{i});
end
fprintf(fout, '\n');

fprintf(fout,'> <NMREDATA_J>\n');
for i=1:size(processing_info.spin_matrix, 1)
    for j=i+1:size(processing_info.spin_matrix, 1)
        if processing_info.spin_matrix(i, j) ~= 0
            fprintf(fout, '%s, %s, %f \\\n', processing_info.spin_names{i}, processing_info.spin_names{j}, processing_info.spin_matrix(i, j));
        end
    end
end
fprintf(fout, '\n');

if ~isempty(processing_info.additional_couplings)
    matrix = processing_info.additional_couplings;
    fprintf(fout, '> <GISSMO_non_hydrogen_J>\n');
    for i=1:size(matrix, 1)
        fprintf(fout, '%s, ., %f \\\n', processing_info.spin_names{matrix(i, 1)}, matrix(i, 2));
    end
    fprintf(fout, '\n');
end

fprintf(fout, '> <NMREDATA_1D_1H>\n');
fprintf(fout, 'Larmor=%f\n', handles.Entry.field_strength);
fprintf(fout, 'Spectrum_Location=file:./1H/pdata/1/1r\n');
fprintf(fout, '\n');
fprintf(fout, '$$$$');

fclose(fout);
here = pwd;
cd(handles.folder_path)
[~, ~] = system('rm -f nmredata.zip; zip -r nmredata.zip nmredata/');
cd(here);
uiwait(msgbox({'saved to', handles.folder_path}));
